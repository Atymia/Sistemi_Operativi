Un sistema e' composto da un buffer di N posizioni, 2*N processi attivi ed un processo coordinatore. Il processo coordinatore estrae uno dopo l'altro in maniera casuale i numeri da 1 a N e ad ogni estrazione i processi competono per aggiudicarsi l' accesso alla posizione corrispondente del buffer, scrivendone il proprio PID. Un processo che ha scritto il proprio PID nel buffer non partecipa piu alla contesa. Quando tutte le posizioni del buffer sono state assegnate, il coordinatore si alterna con l'ultimo processo che ha avuto accesso al buffer nel leggere e stampare, uno alla volta, il contenuto del buffer.


1.Scomposzione
Coordinatore: estrae numeri casuali da 1 a N(posizioni del buffer);
coordina i processi che competono per l'accesso al buffer, una volta che tutte le posizioni del buffer sono occupate, si alterna infine con l'ultimo processo per leggere e stampare il contenuto del buffer

Processi: competono per l'accesso al buffer, e cercano di scrivere il proprio PID in una posizione specifica;
dopo aver scritto nel buffer, il processo termina la contesa;
si alternano con il coordinatore per leggere e stampare il contenuto del buffer.

COORDINATORE(){

     repeat

       wait(mutex_CS);
       if(posizioni_assegnate == N){
           signal(mutex_CS);
           break;
       }// controllo se le posizioni del buffer sono riempite, se si, esco dal ciclo

       posizione_corrente = estrai_random(1,N); // estrazione casuale dei numeri da 1 a N
       while(assegnato(posizione_corrente)){
             posizione_corrente = estrai_random(1,N); se la posizione e' gia' occupata, estrae una nuova posizione
       }
       signal(cord_scelta); // avvisa i processi che il coordinatore ha scelto la posizione
       signal(mutex_CS);

       wait(processo_scritt); // si attende che un processo scriva nella posizione cord_scelta

     forever

     for(int i = 0; i < N; i++){ // cicla sulle posizioni del buffer
        wait(mutex_CS);
        signal(mutex_CS);

        // il coordinatore si alterna con l'ultimo processo
        wait(processo_scritt);
     }
}


PROCESSO(int PID){

    repeat
       wait(cord_scelta); // aspetta che il coordinatore effettui una scelta sulla posizione

       wait(mutex_CS);
       if(!assegnato[posizione_corrente]){ // controlla se la posizione          scelta non e' stata gia' assegnata
         buffer[posizione_corrente] = PID; // scrive l'ID del processo nella posizione del buffer
         assegnato[posizione_corrente] = true; segan la posizione come occupata
         posizioni_assegnate++; incrementa il contatore delle posizioni assegante
         ultimo_PID = PID; // salava l'ID dell'ultimo processo che ha avuto accesso al buffer
         signal(processo_scritt); // notifica che la scrittura e' completa
         break;
       }
       signal(mutex_CS);
    forever
}
