In un ristorante self-service, i clienti, dopo aver mangiato, dispongono i vassoi in M contenitori, ognuno di K ripiani. Periodicamente, un addetto sceglie un contenitore tra quelli in cui ci sono piu ripiani liberi, lo svuota lava i piatti e riporta il contenitore in sala.

1.Scomposizione
I Clienti ripongono i vassoi nei M contenitori disponibili(K ripiani).
L'addetto svuota, pulisce il contenitore che ha il maggior numero di ripiani liberi, per poi riportarlo in sala.



CLIENTE() {
  // arrivo nel ristorante, attendo che sia disponibile un contenitore
  wait(contenitori);

  // utilizzo un indice per capire a quale contenitore sto facendo riferimento
  wait(sem_CS);
  contenitore_loc = index++; // incremento l'indice globale e lo assegno alla variabile locale contenitore_loc
  signal(sem_CS);

  // attendo se non ci sono vassoi puliti, altrimenti prendo il vassoio
  wait(vassoio_pulito[contenitore_loc]);
  { prendi il vassoio }

  // rilascio il contenitore
  wait(sem_CS);
  index--;
  signal(sem_CS);
  signal(contenitori); // il contenitore è di nuovo disponibile

  { mangia } // consuma il pasto

  // dopo aver mangiato, poso il vassoio in un contenitore
  wait(contenitori);

  wait(sem_CS);
  contenitore_loc = index++; // incremento l'indice globale e lo assegno alla variabile locale contenitore_loc
  signal(sem_CS);

  // poso il vassoio precedentemente preso
  signal(vassoio_sporco[contenitore_loc]);
  { posa il vassoio } // il cliente ripone il vassoio sporco nel contenitore

  wait(sem_CS);
  ripiani_sporchi[contenitore_loc]++; // incremento il conteggio dei ripiani sporchi nel contenitore assegnato
  index--; // decremento l'indice globale
  signal(sem_CS);
  signal(contenitori); // segnalo che il contenitore è di nuovo disponibile

  { esci } // il cliente esce dal ristorante
}



CAMERIERE() {
  repeat
    // variabili locali per la ricerca del contenitore con più ripiani sporchi
    int max = 0;
    int ind = -1;

    // ricerca del contenitore con maggior numero di ripiani sporchi
    for (int i = 0; i < M; i++) {
      wait(sem_CS);
      if (ripiani_sporchi[i] > max) { // controllo se il numero di ripiani sporchi è maggiore del massimo attuale
        max = ripiani_sporchi[i]; // aggiorno il valore massimo
        ind = i; // aggiorno l'indice del contenitore con più ripiani sporchi
      }
      signal(sem_CS);
    }

    if (ind != -1) { // se c'è almeno un contenitore con ripiani sporchi
      // una volta trovato, pulisco tutto
      wait(contenitori);
      { pulisci i vassoi } // pulisci i vassoi nel contenitore selezionato

      // segnalo di aver pulito il contenitore
      for (int i = 0; i < max; i++) {
        signal(vassoio_pulito[ind]); // segnalo che un vassoio pulito è disponibile
      }

      // reimposto ripiani_sporchi a 0 e sblocco il contenitore
      wait(sem_CS);
      ripiani_sporchi[ind] = 0; // resetta il conteggio dei ripiani sporchi nel contenitore selezionato
      signal(sem_CS);
      signal(contenitori); // segnalo che il contenitore è di nuovo disponibile
    }
  forever
}
